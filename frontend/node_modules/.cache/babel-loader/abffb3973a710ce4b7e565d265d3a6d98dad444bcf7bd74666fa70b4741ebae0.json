{"ast":null,"code":"var _jsxFileName = \"/Users/aidanleblanc/Desktop/cs32/term-project-xdargan-ssanu-aleblan2-ehuang50/frontend/src/components/Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScatterPlot = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef(null);\n\n  // Array to store randomly generated colors\n  const colors = [];\n  useEffect(() => {\n    const width = 500;\n    const height = 300;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 40,\n      left: 40\n    };\n\n    // Create scales\n    const xScale = d3.scaleLinear().domain([0, 100]).range([0, width]);\n    const yScale = d3.scaleLinear().domain([0, 100]).range([height, 0]);\n\n    // Create SVG container with margins\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`).style('background-color', 'beige');\n    svg.append('rect').attr('width', width).attr('height', height).attr('fill', 'beige');\n\n    // Create circles for each data point with random colors\n    svg.selectAll('circle').data(data).enter().append('circle').attr('cx', d => xScale(d.x)).attr('cy', d => yScale(d.y)).attr('r', 5) // radius of the circle\n    .attr('fill', (d, i) => getRandomColor(i)); // Pass index to getRandomColor\n\n    // Store colors in the array\n    svg.selectAll('circle').each((d, i) => {\n      colors[i] = getRandomColor(i);\n    });\n\n    // Add x-axis\n    const xAxis = d3.axisBottom(xScale);\n    svg.append('g').attr('transform', `translate(0,${height})`).call(xAxis);\n\n    // Add x-axis label\n    svg.append('text').attr('text-anchor', 'middle').attr('transform', `translate(${width / 2},${height + margin.top + 10})`).text('X-Axis Label');\n\n    // Add y-axis\n    const yAxis = d3.axisLeft(yScale);\n    svg.append('g').call(yAxis);\n\n    // Add y-axis label\n    svg.append('text').attr('text-anchor', 'middle').attr('transform', 'rotate(-90)').attr('y', -margin.left + 10).attr('x', -height / 2).text('Y-Axis Label');\n  }, [data]);\n\n  // Function to generate a random color\n  const getRandomColor = index => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    // Update the color in the array\n    colors[index] = color;\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-md mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ScatterPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ScatterPlot","data","_s","svgRef","colors","width","height","margin","top","right","bottom","left","xScale","scaleLinear","domain","range","yScale","svg","select","current","attr","append","style","selectAll","enter","d","x","y","i","getRandomColor","each","xAxis","axisBottom","call","text","yAxis","axisLeft","index","letters","color","Math","floor","random","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aidanleblanc/Desktop/cs32/term-project-xdargan-ssanu-aleblan2-ehuang50/frontend/src/components/Graph.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst ScatterPlot = ({ data }) => {\n  const svgRef = useRef(null);\n\n  // Array to store randomly generated colors\n  const colors = [];\n\n  useEffect(() => {\n    const width = 500;\n    const height = 300;\n    const margin = { top: 20, right: 20, bottom: 40, left: 40 };\n\n    // Create scales\n    const xScale = d3.scaleLinear().domain([0, 100]).range([0, width]);\n    const yScale = d3.scaleLinear().domain([0, 100]).range([height, 0]);\n\n    // Create SVG container with margins\n    const svg = d3.select(svgRef.current)\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`)\n      .style('background-color', 'beige');\n    \n    svg.append('rect')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('fill', 'beige');\n\n    // Create circles for each data point with random colors\n    svg.selectAll('circle')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('cx', d => xScale(d.x))\n      .attr('cy', d => yScale(d.y))\n      .attr('r', 5) // radius of the circle\n      .attr('fill', (d, i) => getRandomColor(i)); // Pass index to getRandomColor\n\n    // Store colors in the array\n    svg.selectAll('circle').each((d, i) => {\n      colors[i] = getRandomColor(i);\n    });\n\n    // Add x-axis\n    const xAxis = d3.axisBottom(xScale);\n    svg.append('g')\n      .attr('transform', `translate(0,${height})`)\n      .call(xAxis);\n\n    // Add x-axis label\n    svg.append('text')\n      .attr('text-anchor', 'middle')\n      .attr('transform', `translate(${width / 2},${height + margin.top + 10})`)\n      .text('X-Axis Label');\n\n    // Add y-axis\n    const yAxis = d3.axisLeft(yScale);\n    svg.append('g')\n      .call(yAxis);\n\n    // Add y-axis label\n    svg.append('text')\n      .attr('text-anchor', 'middle')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', -margin.left + 10)\n      .attr('x', -height / 2)\n      .text('Y-Axis Label');\n  }, [data]);\n\n  // Function to generate a random color\n  const getRandomColor = index => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    // Update the color in the array\n    colors[index] = color;\n    return color;\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}